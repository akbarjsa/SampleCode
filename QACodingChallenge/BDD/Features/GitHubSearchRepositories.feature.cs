// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QACodingChallenge.BDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("GitHubSearchRepositories", Description="\tIn order to utilize GitHub Search Repositories API\r\n\tAs a GitHub Users\r\n\tI want " +
        "to view the Search Repositories Response", SourceFile="BDD\\Features\\GitHubSearchRepositories.feature", SourceLine=0)]
    public partial class GitHubSearchRepositoriesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GitHubSearchRepositories.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GitHubSearchRepositories", "\tIn order to utilize GitHub Search Repositories API\r\n\tAs a GitHub Users\r\n\tI want " +
                    "to view the Search Repositories Response", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validate Simple Search Parameter with Q", new string[] {
                "SimpleSearch"}, SourceLine=6)]
        public virtual void ValidateSimpleSearchParameterWithQ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Simple Search Parameter with Q", new string[] {
                        "SimpleSearch"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table1.AddRow(new string[] {
                        "api"});
#line 8
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table2.AddRow(new string[] {
                        "6300000",
                        "30"});
#line 12
 testRunner.Then("the api response should match \'SearchCount\' scenario", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Page Parameter - Compare Results", SourceLine=15)]
        public virtual void SearchWithPageParameter_CompareResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page Parameter - Compare Results", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page"});
            table3.AddRow(new string[] {
                        "api",
                        "1"});
#line 17
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table3, "Given ");
#line 20
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page"});
            table4.AddRow(new string[] {
                        "api",
                        "2"});
#line 21
 testRunner.And("I invoke another Search-Repository API with different Parameters", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
#line 24
 testRunner.Then("the api response should match \'DifferentPage\' scenario", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Page + PerPage Parameter", SourceLine=27)]
        public virtual void SearchWithPagePerPageParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page + PerPage Parameter", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage"});
            table6.AddRow(new string[] {
                        "api",
                        "2",
                        "5"});
#line 29
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table6, "Given ");
#line 32
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table7.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 33
 testRunner.Then("the api response should match \'SearchCountItems\' scenario", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Page + PerPage OutOfBoundry", SourceLine=36)]
        public virtual void SearchWithPagePerPageOutOfBoundry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page + PerPage OutOfBoundry", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "PerPage"});
            table8.AddRow(new string[] {
                        "api",
                        "5000"});
#line 38
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table8, "Given ");
#line 41
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
            table9.AddRow(new string[] {
                        "100"});
#line 42
 testRunner.Then("the api response should match \'SearchCountItems\' scenario", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Sort Parameter", SourceLine=45)]
        public virtual void SearchWithSortParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Sort Parameter", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort"});
            table10.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars"});
#line 47
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table10, "Given ");
#line 50
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
#line 51
 testRunner.Then("the api response should match \'Sort\' scenario", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Order asc Parameter", SourceLine=53)]
        public virtual void SearchWithOrderAscParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Order asc Parameter", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort",
                        "Order"});
            table12.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars",
                        "asc"});
#line 55
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table12, "Given ");
#line 58
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table13.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 59
 testRunner.Then("the api response should match \'OrderAsc\' scenario", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Order desc Parameter", SourceLine=62)]
        public virtual void SearchWithOrderDescParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Order desc Parameter", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort",
                        "Order"});
            table14.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars",
                        "desc"});
#line 64
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table14, "Given ");
#line 67
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table15.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 68
 testRunner.Then("the api response should match \'OrderDesc\' scenario", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Language Qualifiers", SourceLine=71)]
        public virtual void SearchWithLanguageQualifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Language Qualifiers", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table16.AddRow(new string[] {
                        "api+language:csharp"});
#line 73
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table16, "Given ");
#line 76
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language"});
            table17.AddRow(new string[] {
                        "C#"});
#line 77
 testRunner.Then("the api response should match \'Language\' scenario", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with Star Qualifiers", SourceLine=80)]
        public virtual void SearchWithStarQualifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Star Qualifiers", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table18.AddRow(new string[] {
                        "api+stars:<500"});
#line 82
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table18, "Given ");
#line 85
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Stars"});
            table19.AddRow(new string[] {
                        "499"});
#line 86
 testRunner.Then("the api response should match \'LessthanStars\' scenario", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search with MultipleQualifiers Stars-Fork-Language", SourceLine=89)]
        public virtual void SearchWithMultipleQualifiersStars_Fork_Language()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with MultipleQualifiers Stars-Fork-Language", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table20.AddRow(new string[] {
                        "api+stars:>500+fork:False+language:PHP"});
#line 91
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table20, "Given ");
#line 94
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Stars",
                        "Fork",
                        "Language"});
            table21.AddRow(new string[] {
                        "499",
                        "False",
                        "PHP"});
#line 95
 testRunner.Then("the api response should match \'MultipleQualifiers\' scenario", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GitHubSearchRepositories")]
    public partial class GitHubSearchRepositoriesFeature_NUnit
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GitHubSearchRepositories.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GitHubSearchRepositories", "\tIn order to utilize GitHub Search Repositories API\r\n\tAs a GitHub Users\r\n\tI want " +
                    "to view the Search Repositories Response", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Simple Search Parameter with Q")]
        [NUnit.Framework.CategoryAttribute("SimpleSearch")]
        public virtual void ValidateSimpleSearchParameterWithQ()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Simple Search Parameter with Q", new string[] {
                        "SimpleSearch"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table1.AddRow(new string[] {
                        "api"});
#line 8
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table1, "Given ");
#line 11
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table2.AddRow(new string[] {
                        "6300000",
                        "30"});
#line 12
 testRunner.Then("the api response should match \'SearchCount\' scenario", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Page Parameter - Compare Results")]
        public virtual void SearchWithPageParameter_CompareResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page Parameter - Compare Results", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page"});
            table3.AddRow(new string[] {
                        "api",
                        "1"});
#line 17
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table3, "Given ");
#line 20
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page"});
            table4.AddRow(new string[] {
                        "api",
                        "2"});
#line 21
 testRunner.And("I invoke another Search-Repository API with different Parameters", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
#line 24
 testRunner.Then("the api response should match \'DifferentPage\' scenario", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Page + PerPage Parameter")]
        public virtual void SearchWithPagePerPageParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page + PerPage Parameter", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage"});
            table6.AddRow(new string[] {
                        "api",
                        "2",
                        "5"});
#line 29
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table6, "Given ");
#line 32
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table7.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 33
 testRunner.Then("the api response should match \'SearchCountItems\' scenario", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Page + PerPage OutOfBoundry")]
        public virtual void SearchWithPagePerPageOutOfBoundry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Page + PerPage OutOfBoundry", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "PerPage"});
            table8.AddRow(new string[] {
                        "api",
                        "5000"});
#line 38
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table8, "Given ");
#line 41
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
            table9.AddRow(new string[] {
                        "100"});
#line 42
 testRunner.Then("the api response should match \'SearchCountItems\' scenario", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Sort Parameter")]
        public virtual void SearchWithSortParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Sort Parameter", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort"});
            table10.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars"});
#line 47
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table10, "Given ");
#line 50
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemsCount"});
#line 51
 testRunner.Then("the api response should match \'Sort\' scenario", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Order asc Parameter")]
        public virtual void SearchWithOrderAscParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Order asc Parameter", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort",
                        "Order"});
            table12.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars",
                        "asc"});
#line 55
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table12, "Given ");
#line 58
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table13.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 59
 testRunner.Then("the api response should match \'OrderAsc\' scenario", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Order desc Parameter")]
        public virtual void SearchWithOrderDescParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Order desc Parameter", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q",
                        "Page",
                        "PerPage",
                        "Sort",
                        "Order"});
            table14.AddRow(new string[] {
                        "api",
                        "2",
                        "5",
                        "stars",
                        "desc"});
#line 64
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table14, "Given ");
#line 67
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "OverResultsCount",
                        "ItemsCount"});
            table15.AddRow(new string[] {
                        "6300000",
                        "5"});
#line 68
 testRunner.Then("the api response should match \'OrderDesc\' scenario", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Language Qualifiers")]
        public virtual void SearchWithLanguageQualifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Language Qualifiers", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table16.AddRow(new string[] {
                        "api+language:csharp"});
#line 73
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table16, "Given ");
#line 76
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language"});
            table17.AddRow(new string[] {
                        "C#"});
#line 77
 testRunner.Then("the api response should match \'Language\' scenario", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with Star Qualifiers")]
        public virtual void SearchWithStarQualifiers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with Star Qualifiers", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table18.AddRow(new string[] {
                        "api+stars:<500"});
#line 82
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table18, "Given ");
#line 85
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Stars"});
            table19.AddRow(new string[] {
                        "499"});
#line 86
 testRunner.Then("the api response should match \'LessthanStars\' scenario", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with MultipleQualifiers Stars-Fork-Language")]
        public virtual void SearchWithMultipleQualifiersStars_Fork_Language()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with MultipleQualifiers Stars-Fork-Language", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Q"});
            table20.AddRow(new string[] {
                        "api+stars:>500+fork:False+language:PHP"});
#line 91
 testRunner.Given("I have contructed the api with following Search-Repository Parameter", ((string)(null)), table20, "Given ");
#line 94
 testRunner.When("I invoke the Search-Repository API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Stars",
                        "Fork",
                        "Language"});
            table21.AddRow(new string[] {
                        "499",
                        "False",
                        "PHP"});
#line 95
 testRunner.Then("the api response should match \'MultipleQualifiers\' scenario", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
